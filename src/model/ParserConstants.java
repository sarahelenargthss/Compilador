package model;

public interface ParserConstants
{
    int START_SYMBOL = 49;

    int FIRST_NON_TERMINAL    = 49;
    int FIRST_SEMANTIC_ACTION = 88;

    int[][] PARSER_TABLE =
    {
        { -1, -1, -1, -1, -1, -1, -1, -1, -1,  0, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,  0, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1 },
        { -1,  1, -1, -1, -1, -1, -1, -1, -1, -1,  1, -1, -1, -1, -1, -1, -1,  1, -1,  1, -1,  1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1 },
        { -1,  3, -1, -1, -1, -1, -1, -1, -1, -1,  3,  2,  2,  2, -1, -1, -1,  3, -1,  3, -1,  3, -1, -1, -1, -1, -1,  2, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1 },
        { -1,  4, -1, -1, -1, -1, -1, -1, -1, -1,  8, -1, -1, -1, -1, -1, -1,  7, -1,  5, -1,  6, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1 },
        { -1, -1, -1, -1, -1, -1, -1, -1, -1,  9, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 10, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1 },
        { -1, 11, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1 },
        { -1, 13, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 12, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1 },
        { -1, 14, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1 },
        { -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 15, 16, -1, -1 },
        { -1, 17, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1 },
        { -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 18, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 19, -1, -1, 18, 18, 18, 18 },
        { -1, -1, -1, -1, -1, -1, -1, 24, 22, -1, -1, -1, -1, -1, -1, 21, 25, -1, 20, -1, -1, -1, 23, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1 },
        { -1, -1, 28, 29, 30, 31, 32, -1, -1, -1, -1, -1, -1, -1, 27, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 26, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1 },
        { -1, 33, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1 },
        { -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 36, 34, 35 },
        { -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 37, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1 },
        { -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 38, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1 },
        { -1, 39, 39, 39, 39, 39, 39, -1, -1, -1, -1, -1, -1, -1, 39, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 39, -1, 39, -1, -1, -1, -1, -1, -1, -1, 39, 39, 39, -1, -1, -1, -1, -1, -1, -1, -1, -1 },
        { -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 40, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 41, -1, -1, -1, -1, -1, -1 },
        { -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 42, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1 },
        { -1, 43, 43, 43, 43, 43, 43, -1, -1, -1, -1, -1, -1, -1, 43, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 43, -1, 43, -1, -1, -1, -1, -1, -1, -1, 43, 43, 43, -1, -1, -1, -1, -1, -1, -1, -1, -1 },
        { -1, 44, 44, 44, 44, 44, 44, -1, -1, -1, -1, -1, -1, -1, 44, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 44, -1, 44, -1, -1, -1, -1, -1, -1, -1, 44, 44, 44, -1, -1, -1, -1, -1, -1, -1, -1, -1 },
        { -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 45, 46, 46, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1 },
        { -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 47, 48, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1 },
        { -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 49, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1 },
        { -1, 50, 50, 50, 50, 50, 50, -1, -1, -1, -1, -1, -1, -1, 50, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 50, -1, 50, -1, -1, -1, -1, -1, -1, -1, 50, 50, 50, -1, -1, -1, -1, -1, -1, -1, -1, -1 },
        { -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 53, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 53, -1, -1, -1, -1, 51, 52, -1, -1, -1, -1, -1, 53, -1, 53, 53, -1, -1, -1 },
        { -1, 54, 54, 54, 54, 54, 54, -1, -1, -1, -1, -1, -1, -1, 56, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 55, -1, 54, -1, -1, -1, -1, -1, -1, -1, 57, 54, 54, -1, -1, -1, -1, -1, -1, -1, -1, -1 },
        { -1, 58, 58, 58, 58, 58, 58, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 58, -1, -1, -1, -1, -1, -1, -1, -1, 58, 58, -1, -1, -1, -1, -1, -1, -1, -1, -1 },
        { -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 60, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 60, 59, 59, 59, 59, 60, 60, -1, -1, -1, -1, -1, 60, -1, 60, 60, -1, -1, -1 },
        { -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 61, 62, 63, 64, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1 },
        { -1, 65, 65, 65, 65, 65, 65, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 65, -1, -1, -1, -1, -1, -1, -1, -1, 65, 65, -1, -1, -1, -1, -1, -1, -1, -1, -1 },
        { -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 68, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 68, 68, 68, 68, 68, 68, 68, -1, 66, 67, -1, -1, 68, -1, 68, 68, -1, -1, -1 },
        { -1, 69, 69, 69, 69, 69, 69, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 69, -1, -1, -1, -1, -1, -1, -1, -1, 69, 69, -1, -1, -1, -1, -1, -1, -1, -1, -1 },
        { -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 72, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 72, 72, 72, 72, 72, 72, 72, -1, 72, 72, 70, 71, 72, -1, 72, 72, -1, -1, -1 },
        { -1, 73, 73, 73, 73, 73, 73, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 73, -1, -1, -1, -1, -1, -1, -1, -1, 73, 73, -1, -1, -1, -1, -1, -1, -1, -1, -1 },
        { -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 74, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 74, 74, 74, 74, 74, 74, 74, -1, 74, 74, 74, 74, 74, 75, 74, 74, -1, -1, -1 },
        { -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 76, 77, 78, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1 },
        { -1, 79, 80, 81, 83, 84, 82, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 85, -1, -1, -1, -1, -1, -1, -1, -1, 86, 87, -1, -1, -1, -1, -1, -1, -1, -1, -1 }
    };

    int[][] PRODUCTIONS = 
    {
        { 103,  53,  21,  50,  14, 104 },
        {  52,  44,  51 },
        {   0 },
        {  50 },
        {  62 },
        {  64 },
        {  65 },
        {  68 },
        {  73 },
        {  10,  54 },
        {   0 },
        {  56,  55 },
        {   0 },
        {  54 },
        {  58,  57 },
        {  45,  60, 118, 119,  44 },
        {  46,  61, 124, 125,  44 },
        {   2, 120,  59 },
        {   0 },
        {  42,  58 },
        {  19 },
        {  16 },
        {   9 },
        {  23 },
        {   8 },
        {  17 },
        {  27 },
        {  15 },
        {   3 },
        {   4 },
        {   5 },
        {   6 },
        {   7 },
        {  58,  63, 126,  74, 122 },
        {  47 },
        {  48 },
        {  46 },
        {  20,  29,  58, 123,  30 },
        {  22,  29,  66,  30 },
        {  74, 102,  67 },
        {   0 },
        {  42,  66 },
        {  18,  69,  71,  72,  14, 128 },
        {  74, 127,  45,  50 },
        {  74, 130,  45,  50 },
        { 129,  12,  70,  71 },
        {   0 },
        { 131,  13,  45,  50 },
        {   0 },
        { 132,  11,  50,  28,  45,  74, 133,  14 },
        {  76,  75 },
        {  35,  76, 105,  75 },
        {  36,  76, 106,  75 },
        {   0 },
        {  77 },
        {  27,  99 },
        {  15, 100 },
        {  37,  76, 101 },
        {  80,  78 },
        {  79,  97,  80,  98 },
        {   0 },
        {  31 },
        {  32 },
        {  33 },
        {  34 },
        {  82,  81 },
        {  38,  82,  89,  81 },
        {  39,  82,  90,  81 },
        {   0 },
        {  84,  83 },
        {  40,  84,  91,  83 },
        {  41,  84,  92,  83 },
        {   0 },
        {  87,  85 },
        {   0 },
        {  43,  86 },
        {  24, 110 },
        {  25, 111 },
        {  26, 112 },
        {   2, 121 },
        {   3,  93 },
        {   4,  94 },
        {   7, 107 },
        {   5, 108 },
        {   6, 109 },
        {  29,  74,  30 },
        {  38,  87,  95 },
        {  39,  87,  96 }
    };

    String[] PARSER_ERROR =
    {
        "",
        "esperado EOF", // "Era esperado fim de programa"
        "esperado identificador", // "Era esperado identificador"
        "esperado cInteira", // "Era esperado cInteira"
        "esperado cReal", // "Era esperado cReal"
        "esperado cBinaria", // "Era esperado cBinaria"
        "esperado cHexadecimal", // "Era esperado cHexadecimal"
        "esperado cString", // "Era esperado cString"
        "esperado bin", // "Era esperado bin"
        "esperado bool", // "Era esperado bool"
        "esperado def", // "Era esperado def"
        "esperado do", // "Era esperado do"
        "esperado elif", // "Era esperado elif"
        "esperado else", // "Era esperado else"
        "esperado end", // "Era esperado end"
        "esperado false", // "Era esperado false"
        "esperado float", // "Era esperado float"
        "esperado hexa", // "Era esperado hexa"
        "esperado if", // "Era esperado if"
        "esperado int", // "Era esperado int"
        "esperado listen", // "Era esperado listen"
        "esperado main", // "Era esperado main"
        "esperado speak", // "Era esperado speak"
        "esperado str", // "Era esperado str"
        "esperado toInt", // "Era esperado toInt"
        "esperado toBin", // "Era esperado toBin"
        "esperado toHexa", // "Era esperado toHexa"
        "esperado true", // "Era esperado true"
        "esperado whileFalse", // "Era esperado whileFalse"
        "esperado (", // "Era esperado ("
        "esperado )", // "Era esperado )"
        "esperado ==", // "Era esperado =="
        "esperado !=", // "Era esperado !="
        "esperado <", // "Era esperado <"
        "esperado >", // "Era esperado >"
        "esperado &", // "Era esperado &"
        "esperado |", // "Era esperado |"
        "esperado !", // "Era esperado !"
        "esperado +", // "Era esperado +"
        "esperado -", // "Era esperado -"
        "esperado *", // "Era esperado *"
        "esperado /", // "Era esperado /"
        "esperado ,", // "Era esperado ,"
        "esperado .", // "Era esperado ."
        "esperado ;", // "Era esperado ;"
        "esperado :", // "Era esperado :"
        "esperado =", // "Era esperado ="
        "esperado +=", // "Era esperado +="
        "esperado -=", // "Era esperado -="
        "esperado def main", // "<programa> inv�lido"
        "esperado identificador do if listen speak", // "<lista_de_comandos> inv�lido"
        "esperado identificador do elif else end if listen speak whileFalse", // "<lista_de_comandos1> inv�lido"
        "esperado identificador do if listen speak", // "<comando> inv�lido"
        "esperado def main", // "<declaracao> inv�lido"
        "esperado identificador", // "<declaracao_de_variaveis> inv�lido"
        "esperado identificador main", // "<declaracao_de_variaveis1> inv�lido"
        "esperado identificador", // "<variavel> inv�lido"
        "esperado   :   =", // "<variavel1> inv�lido"
        "esperado identificador", // "<lista_id> inv�lido"
        "esperado   )   ,   :   operador de atribui��o", // "<lista_id1> inv�lido"
        "esperado tipo", // "<tipo> inv�lido"
        "esperada uma constante", // "<valor> inv�lido"
        "esperado identificador", // "<atribuicao> inv�lido"
        "esperado operador de atribui��o", // "<simbolo_de_atribuicao> inv�lido"
        "esperado listen", // "<entrada> inv�lido"
        "esperado speak", // "<saida> inv�lido"
        "esperada uma express�o", // "<lista_de_expressoes> inv�lido"
        "esperado   )   ,", // "<lista_de_expressoes1> inv�lido"
        "esperado if", // "<selecao> inv�lido"
        "esperada uma express�o", // "<verificacao_e_execucao> inv�lido"
        "esperada uma express�o", // "<verificacao_e_execucao1> inv�lido",
        "esperado elif else end", // "<elif> inv�lido"
        "esperado else end", // "<else> inv�lido"
        "esperado do", // "<repeticao> inv�lido"
        "esperada uma express�o", // "<expressao> inv�lido"
        "esperada uma express�o", // "<expressao1> inv�lido"
        "esperada uma express�o", // "<elemento> inv�lido"
        "esperada uma express�o", // "<relacional> inv�lido"
        "esperada uma express�o", // "<relacional1> inv�lido"
        "esperada uma express�o", // "<operador_relacional> inv�lido"
        "esperada uma express�o", // "<aritmetica> inv�lido"
        "esperada uma express�o", // "<aritmetica1> inv�lido"
        "esperada uma express�o", // "<termo> inv�lido"
        "esperada uma express�o", // "<termo1> inv�lido"
        "esperada uma express�o", // "<fator> inv�lido"
        "esperada uma express�o", // "<fator1> inv�lido"
        "esperada uma express�o", // "<fator2> inv�lido"
        "esperada uma express�o" // "<membro> inv�lido"
    };
}
